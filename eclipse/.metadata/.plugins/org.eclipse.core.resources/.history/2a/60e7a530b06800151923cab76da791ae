package week1

object assignment1 {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet

  def pascal(c: Int, r: Int): Int = {

    def helper(c: Int, r: Int): Int = {
      if (c == 0 && r == 0) 1 else {
        if (c == 0) 1 else {
          if (r == 0) 0 else {
            helper(c - 1, r - 1) + helper(c, r - 1)
          }
        }
      }
    }
    if (c > r) throw new RuntimeException("c must be <= r") else helper(c, r)

  }                                               //> pascal: (c: Int, r: Int)Int

  pascal(2, 4)                                    //> res0: Int = 6

  def balance(chars: List[Char]): Boolean = {
    def go(cs: List[Char], level: Int): Boolean = cs match {
      case Nil                   => level == 0
      case ')' :: _ if level < 1 => false
      case ')' :: xs             => go(xs, level - 1)
      case '(' :: xs             => go(xs, level + 1)
      case _ :: xs               => go(xs, level)
    }
    go(chars, 0)
  }                                               //> balance: (chars: List[Char])Boolean

  balance(")(".toList)                            //> res1: Boolean = false
  
  
  def balance2(chars: List[Char]): Boolean = {
    def f(chars: List[Char], numOpens: Int): Boolean = {
      if (chars.isEmpty) {
        numOpens == 0
      } else {
        val h = chars.head
        val n =
          if (h == '(') numOpens + 1
          else if (h == ')') numOpens - 1
          else numOpens
        if (n >= 0) f(chars.tail, n)
        else false
      }
    }

    f(chars, 0)
  }                                               //> balance2: (chars: List[Char])Boolean
  balance2("()".toList)                           //> res2: Boolean = true
  
  /**
  countChars: counts number of characters in a string
  chars: string for which we wish to count characters
  check: helper function with counter variable to keep track of character numbers
  */
  def countChars(chars: List[Char]): Int ={
    def check(counter: Int, chars: List[Char]): Int = {
      if (chars.isEmpty) counter
      else check(counter+1, chars.tail)
    }
    
    check(0, chars)
  }                                               //> countChars: (chars: List[Char])Int
  countChars("hello world!".toList)               //> res3: Int = 12
  
  /**
  balance3: counts number of opening and closing parantheses pairs. if pairs balance, return true.
  */
  def balance3(chars: List[Char]): Boolean ={
    
    def check(counter: Int, chars: List[Char]): Int = {
      val h = chars.head
      if (chars.isEmpty) counter
    	else if (h == "(") check(counter+1, chars.tail)
    	else if (h == ")") check(counter-1, chars.tail)
    	else check(counter, chars.tail)
    }
  	
  	check(0,chars) == 0
  }                                               //> balance3: (chars: List[Char])Boolean
  
  balance3("()".toList)                           //> java.util.NoSuchElementException: head of empty list
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:420)
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:417)
                                                  //| 	at week1.assignment1$$anonfun$main$1.check$2(week1.assignment1.scala:77)
                                                  //| 
                                                  //| 	at week1.assignment1$$anonfun$main$1.balance3$1(week1.assignment1.scala:
                                                  //| 84)
                                                  //| 	at week1.assignment1$$anonfun$main$1.apply$mcV$sp(week1.assignment1.scal
                                                  //| a:87)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at week1.assignment1$.main(week1.assignment1.scala:3)
                                                  //| 	at week1.assignment1.main(week1.assignment1.scala)
  
}